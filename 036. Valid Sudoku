//数独规则是每一行或者每一列必须没有重复素质，然后总共九个sub square也没有重复的数字。
第二种方法 更加巧妙，尤其是block这个地方，你会发现， 相当于第一个subblock 对应0，第二个sub block 对应全是1.
public class Solution {
	public boolean isValidSudoku(char[][] board) {
   //计算行符不符合
		for (int i = 0; i < board.length; i++) {
			Set<Character> row = new HashSet<Character>();
			for (int j = 0; j < board[0].length; j++) {

				if (board[i][j] != '.')
					if (!row.add(board[i][j]))
						return false;

			}

		}
		计算列符不符合
		for (int j = 0; j < board.length; j++) {
			Set<Character> col = new HashSet<Character>();
			for (int i = 0; i < 9; i++) {

				if (board[i][j] != '.')
					if (!col.add(board[i][j]))
						return false;

			}

		}
计算每九个符不不符合
		for (int i = 0; i < 7; i = i + 3) {

			for (int j = 0; j < 7; j = j + 3) {
				Set<Character> sub = new HashSet<Character>();
				for (int k = i; k < i + 3; k++)
					for (int l = j; l < j + 3; l++)
						if (board[k][l] != '.') {
							if (!sub.add(board[k][l])) {

								return false;
							}

						}

			}

		}

		return true;
	}
}
//第二种方法
public class Solution {
    public boolean isValidSudoku(char[][] board) {
        boolean[][]rset=new boolean[9][9];
        boolean[][]cset=new boolean[9][9];
        boolean[][]sblset=new boolean[9][9]; //对应的是9个subblock，subblock编号使用i-i%3+j/3算出来的。如果我遍历所有元素，他的思想是如果
        对应元素值是a；就让对应【行】【a】变成true，【a】列变成true；对应subblock【i-i%3+j/3】【a】变成true
        for(int i=0;i<9;i++)
            for (int j=0;j<9;j++){
                if(board[i][j]!='.')
                { int a=(int)(board[i][j]-'1');//不能是-‘0’ 因为你要使其对应范围是0-8
                  if(cset[a][j]||rset[i][a]||sblset[i-i%3+j/3][a])
                  return false;
                  else{
                  cset[a][j]=true;
                  rset[i][a]=true;
                  sblset[i-i%3+j/3][a]=true;
                    
                    
                }
                
            }
            
            }
        return true;
        
    }
}
