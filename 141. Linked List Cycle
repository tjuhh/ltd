/*基本思想用一个hashset存起来,需要额外空间
*/

public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> visited=new HashSet<ListNode>();
  
        while(head!=null)
        {if(!visited.add(head))
         return true;
         else
         head=head.next;
            
        }
        return false;
    }
}
/*第二种可以看一下tutorial，需要注意的有一个方面
就是比如只有一个元素1，自循环， 所以先移动node，再判断是不是fast==slow

*/
public class Solution {
    public boolean hasCycle(ListNode head) {
      ListNode fast=head;
      ListNode slow=head;
      if(head==null)
      return false;
      while(fast!=null)
      { if(fast.next==null)
      return false;
        fast=fast.next.next;
       slow=slow.next;
       if(fast==slow)
       return true;
          
      }
      return false;
    }
}
第三种更好理解，是tutorial给的
public boolean hasCycle(ListNode head) {
    if (head == null || head.next == null) {
        return false;
    }
    ListNode slow = head;
    ListNode fast = head.next;
    while (slow != fast) {
        if (fast == null || fast.next == null) {
            return false;
        }
        slow = slow.next;
        fast = fast.next.next;
    }
    return true;
}
第二次做的答案
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null)
        return false;
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null&&fast.next!=null)
        {fast=fast.next.next;
        slow=slow.next;
         if(fast==slow)
         return true;
        }
        return false;
    }
}
